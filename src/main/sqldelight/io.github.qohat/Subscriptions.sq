import io.github.qohat.repo.UserId;
import io.github.qohat.repo.RepoId;
import java.time.OffsetDateTime;

CREATE TABLE IF NOT EXISTS subscriptions(
    user_id UUID AS UserId REFERENCES users(id) ON DELETE CASCADE NOT NULL,
    repository_id UUID AS RepoId REFERENCES repositories(id) ON DELETE CASCADE NOT NULL,
    type VARCHAR(10) NOT NULL,
    createdAt VARCHAR(50) AS OffsetDateTime NOT NULL
);

insert:
INSERT INTO subscriptions(user_id, repository_id, type, createdAt)
VALUES (:user_id, :repository_id, :type, :createdAt);

findByUser:
SELECT repositories.owner, repositories.repository, subscriptions.user_id, subscriptions.createdAt FROM subscriptions
INNER JOIN users ON users.id = subscriptions.user_id
INNER JOIN repositories ON repositories.id = subscriptions.repository_id
WHERE subscriptions.user_id = :user_id;

findByRepo:
SELECT repositories.owner, repositories.repository, subscriptions.user_id, subscriptions.createdAt FROM subscriptions
INNER JOIN users ON users.id = subscriptions.user_id
INNER JOIN repositories ON repositories.id = subscriptions.repository_id
WHERE repository_id = :repository_id;

findByUserAndRepo:
SELECT repositories.owner, repositories.repository, subscriptions.user_id, subscriptions.createdAt FROM subscriptions
INNER JOIN users ON users.id = subscriptions.user_id
INNER JOIN repositories ON repositories.id = subscriptions.repository_id
WHERE user_id = :user_id AND repository_id = :repository_id;

delete:
DELETE FROM subscriptions
WHERE user_id = :user_id AND repository_id = :repository_id;

findAll:
SELECT repositories.owner, repositories.repository, subscriptions.user_id, subscriptions.createdAt FROM subscriptions
INNER JOIN users ON users.id = subscriptions.user_id
INNER JOIN repositories ON repositories.id = subscriptions.repository_id;